#!/usr/bin/perl
# Copyright 2014 Pierre Mavro <deimos@deimos.fr>
# Copyright 2014 Vivien Didelot <vivien@didelot.org>
# Copyright 2014 Andreas Guldstrand <andreas.guldstrand@gmail.com>
# Copyright 2014 Benjamin Chretien <chretien at lirmm dot fr>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

use strict;
use warnings;
use utf8;
use Getopt::Long;

binmode(STDOUT, ":utf8");
*STDERR = *STDOUT; # 2>&1

# default values
my $t_warn = 70;
my $t_crit = 90;
my $chip = "";
my $temperature = -9999;
my $lower_color = "FFFF00";
my $upper_color = "FF0000";

sub help {
    print "Usage: temperature [-w <warning>] [-c <critical>] [--chip <chip>]\n";
    print "-w <temperature>: warning threshold\n";
    print "-c <temperature>: critical threshold\n";
    print "--chip <chip>: sensor chip\n";
    exit 0;
}

GetOptions("help|h" => \&help,
           "w=i"    => \$t_warn,
           "c=i"    => \$t_crit,
           "chip=s" => \$chip);

# Simple linear color gradient
sub color_gradient {
    my ($min, $max) = @_;
    my $range = $max - $min;

    return sub {
        my $num = shift;
        return $lower_color if $num <= $min; # lower boundry
        return $upper_color if $num >= $max; # upper boundary

        my $alpha = ($num - $min) / $range;
        my @lower_rgb = map $_, unpack 'C*', pack 'H*', $lower_color;
        my @upper_rgb = map $_, unpack 'C*', pack 'H*', $upper_color;
        my @scaled_rgb = (0, 0, 0);
        for (my $i = 0; $i < 3; $i++) {
          $scaled_rgb[$i] = int($lower_rgb[$i]
                                + $alpha * ($upper_rgb[$i] - $lower_rgb[$i]));
        }
        return sprintf "%02X%02X%02X" => $scaled_rgb[0], $scaled_rgb[1], $scaled_rgb[2];
    };
}

# Get chip temperature
open (SENSORS, "sensors $chip |") or die "Cannot exec sensors $!";
while (<SENSORS>) {
    if (/^Physical id \d:\s+[\+]*([\-]*\d+\.\d+)/) {
        $temperature = $1;
        last;
    }
}
close(SENSORS);

$temperature eq -9999 and die 'Cannot find temperature';

# Print short_text, full_text
print "$temperatureÂ°C\n" x2;

# Print color gradient, if needed
if ($temperature >= $t_warn) {
    my $color_gradient = color_gradient($t_warn, $t_crit);
    print "#", $color_gradient->($temperature), "\n";
    if ($temperature >= $t_crit) {
        exit 33;
    }
}

exit 0;
