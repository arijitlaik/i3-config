#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import print_function

import os
import sys
import argparse
import subprocess

from github3 import login

# Credentials files. DO NOT SHARE/COMMIT/WHATEVER.
CREDENTIALS_FILE = os.path.expanduser("~/.i3/.gh_token")


def get_github_username():
    """
    Get the GitHub user name from git config.
    """
    user = subprocess.check_output(['git', 'config', 'github.user']).rstrip()
    return user.decode('utf-8')


def request_token():
    """
    Request a GitHub token for later use.
    """
    from getpass import getpass
    from github3 import authorize

    password = ''

    username = get_github_username()
    while not password:
        password = getpass('Password for GitHub user {0}: '.format(username))

    note = 'GitHub notifications for i3blocks'
    note_url = 'https://github.com/bchretien/i3-config'
    scopes = ['notifications']

    try:
        auth = authorize(username, password, scopes, note, note_url)
    except Exception:
        print("Error: could not generate token", file=sys.stderr)
        sys.exit(1)

    with open(CREDENTIALS_FILE, 'w') as fd:
        fd.write("%s\n%i" % (auth.token, auth.id))


def github_login():
    """
    Retrieve the GitHub token and log on GitHub.
    """
    token = ''
    with open(CREDENTIALS_FILE, 'r') as fd:
        # Can't hurt to be paranoid
        token = fd.readline().strip()

    gh = login(token=token)
    return gh


def browse_github(with_notifications=False):
    """
    """
    import webbrowser
    if with_notifications:
        url = "https://github.com/notifications"
    else:
        url = "https://github.com/"
    webbrowser.open(url)


def get_notifications():
    """
    Get the GitHub notifications.
    """
    gh = github_login()
    return gh.notifications()


def print_block():
    """
    Print block for i3blocks.
    """
    size = 12
    color = "#333333"
    symbol = "\uf09b"

    n = 0
    try:
        notifications = get_notifications()
        n = sum(1 for _ in notifications)
        if n > 0:
            color = "#ff6600"
        else:
            color = "#ffcc33"
    except Exception:
        pass

    msg = "<span font='%i' color='%s'>%s</span>" \
          % (size, color, symbol)
    print(msg)
    print(msg)

    return n


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--generate-token", action="store_true",
                        help="generate a GitHub token")
    args = parser.parse_args()

    if args.generate_token:
        request_token()
    elif not os.path.isfile(CREDENTIALS_FILE):
        print("Error: run script with --generate-token to generate"
              " a GitHub token", file=sys.stderr)
        sys.exit(1)

    n = print_block()

    button_pressed = 0
    if "BLOCK_BUTTON" in os.environ and len(os.environ["BLOCK_BUTTON"]) > 0:
        button_pressed = int(os.environ["BLOCK_BUTTON"])

    if button_pressed == 1:
        browse_github(n > 1)
