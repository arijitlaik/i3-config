#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import print_function

import os
import sys
import argparse
import subprocess
from getpass import getpass

from github3 import login, exceptions, authorize

# Credentials files. DO NOT SHARE/COMMIT/WHATEVER.
CREDENTIALS_FILE = os.path.expanduser("~/.local/share/i3blocks/gh_token")

# Size of the message
SIZE = 12
# Color if GitHub could not be queried
COLOR_OFF = "#333333"
# Color if GitHub could be queried, but no notification was found
COLOR_ON = "#ffcc33"
# Color if notifications were found
COLOR_NOTIF = "#ff6600"
# Symbol/text used
SYMBOL = "\uf09b"


def get_github_username():
    """
    Get the GitHub user name from git config, or ask the user directly.
    """
    try:
        user = subprocess.check_output(['git', 'config', 'github.user'])
        return user.rstrip().decode('utf-8')
    except subprocess.CalledProcessError:
        # For Python 2/3 compatibility
        try:
            global input
            input = raw_input
        except NameError:
            pass
        return str(input("GitHub username: "))


def get_github_password(username):
    """
    Get the GitHub password associated with the username.
    """
    password = ''
    while not password:
        password = getpass('Password for GitHub user {0}: '.format(username))
    return password


def read_github_token():
    """
    Read the GitHub token from the credentials file.
    """
    token = id = ''
    with open(CREDENTIALS_FILE, 'r') as fd:
        # Can't hurt to be paranoid
        token = fd.readline().strip()
        id = fd.readline().strip()
    return token, id


def request_token():
    """
    Request a GitHub token for later use.
    """
    username = get_github_username()
    password = get_github_password(username)

    note = 'GitHub notifications for i3blocks'
    note_url = 'https://github.com/bchretien/i3-config'
    scopes = ['notifications']

    try:
        auth = authorize(username, password, scopes=scopes, note=note,
                         note_url=note_url)
    except exceptions.GitHubError as e:
        print("Error: could not generate token - \"%s\"" % e, file=sys.stderr)
        sys.exit(1)

    if not os.path.exists(os.path.dirname(CREDENTIALS_FILE)):
        os.makedirs(os.path.dirname(CREDENTIALS_FILE))
    with open(CREDENTIALS_FILE, 'w') as fd:
        fd.write("%s\n%i" % (auth.token, auth.id))


def delete_token():
    """
    Revoke and delete the GitHub token (locally as well).
    Revoking/deleting a token requires a login with username/password.
    """
    if os.path.exists(CREDENTIALS_FILE):
        token, id = read_github_token()
        username = get_github_username()
        gh = login(username=username, password=get_github_password(username))
        gh.authorization(id).delete()
        os.remove(CREDENTIALS_FILE)


def github_login():
    """
    Retrieve the GitHub token and log on GitHub.
    """
    return login(token=read_github_token()[0])


def browse_github(with_notifications=False):
    """
    """
    import webbrowser
    if with_notifications:
        url = "https://github.com/notifications"
    else:
        url = "https://github.com/"
    webbrowser.open(url)


def get_notifications():
    """
    Get the GitHub notifications.
    """
    gh = github_login()
    return gh.notifications()


def print_block():
    """
    Print block for i3blocks.
    """
    color = COLOR_OFF

    n = 0
    try:
        notifications = get_notifications()
        n = sum(1 for _ in notifications)
        if n > 0:
            color = COLOR_NOTIF
        else:
            color = COLOR_ON
    except Exception:
        pass

    msg = "<span font='%i' color='%s'>%s</span>" \
          % (SIZE, color, SYMBOL)
    print(msg)
    print(msg)

    return n


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--generate-token", action="store_true", default=False,
                        help="generate a GitHub token")
    parser.add_argument("--delete-token", action="store_true", default=False,
                        help="delete the GitHub token")
    args = parser.parse_args()

    if args.delete_token:
        delete_token()
        sys.exit(0)

    if args.generate_token:
        request_token()
    elif not os.path.isfile(CREDENTIALS_FILE):
        print("Error: run script with --generate-token to generate"
              " a GitHub token", file=sys.stderr)
        sys.exit(1)

    n = print_block()

    button_pressed = 0
    if "BLOCK_BUTTON" in os.environ and len(os.environ["BLOCK_BUTTON"]) > 0:
        button_pressed = int(os.environ["BLOCK_BUTTON"])

    if button_pressed == 1:
        browse_github(n > 1)
